version: "3"
services:
  postgres:
    image: postgres:16rc1-alpine3.18
    container_name: LMR-postgres
    environment:
      - POSTGRES_USER=lmr
      - POSTGRES_PASSWORD=lmrSecretDBPassword
      - POSTGRES_DB=inventory
    volumes:
      - ./db/database:/var/lib/postgresql/data
      - ./db/init:/docker-entrypoint-initdb.d
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready","-U","lmr","-d","inventory"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
        - backend
    restart: always
    
  python:
    build: backend
    container_name: LMR-python
    volumes:
      - ./backend/scripts:/home/scripts
    entrypoint: ["flask","--app", "main","run", "--host=0.0.0.0"]
    ports:
      - 5000:5000
    #healthcheck:
    #  test: ["CMD", "exit", "0"]
    #  interval: 10s
    #  timeout: 5s
    #  retries: 5
    networks:
        - backend
        - frontend
    devices:
      - /dev/ttyS0:/dev/ttyS0
      #- /dev/null:/dev/ttyS0
    restart: always
    depends_on:
      postgres:
        condition: service_healthy

  nginx:
    image: nginx:mainline-alpine3.18
    container_name: LMR-nginx
    volumes:
      - ./frontend/www:/usr/share/nginx/html
    ports:
      - 80:80
    #healthcheck:
    #  test: ["CMD", "exit", "0"]
    #  interval: 10s
    #  timeout: 5s
    #  retries: 5
    networks:
        - frontend
    restart: always
    depends_on:
      python:
        #condition: service_healthy
        condition: service_started

networks:
  frontend:
  backend:
